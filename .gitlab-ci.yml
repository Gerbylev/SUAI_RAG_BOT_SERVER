stages:
  - build-base
  - quality
  - test
  - build
  - deploy
  - endpoint-test

variables:
  POSTGRES_DB: rag_server_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST_AUTH_METHOD: trust
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  DEV_IMAGE_TAG: $CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHA

# Собираем базовый образ с зависимостями один раз
build_dev_image:
  stage: build-base
  image: docker:27
  services:
    - docker:27-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --target builder -t $DEV_IMAGE_TAG .
    - docker push $DEV_IMAGE_TAG
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

ruff_check:
  stage: quality
  image: $DEV_IMAGE_TAG
  script:
    - uv run ruff check src/
  needs:
    - build_dev_image
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

unit_tests:
  stage: test
  image: $DEV_IMAGE_TAG
  services:
    - name: postgres:16
      alias: postgres
  variables:
    DB__HOST: postgres
    DB__DATABASE: $POSTGRES_DB
    DB__USERNAME: $POSTGRES_USER
    DB__PASSWORD: $POSTGRES_PASSWORD
  script:
    - uv run pytest --cov=src --cov-report=term --cov-report=xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - tests/htmlcov/
      - tests/pytest-report/
    expire_in: 1 week
  needs:
    - build_dev_image
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

build_image:
  stage: build
  image: docker:27
  services:
    - docker:27-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --target production -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  needs:
    - ruff_check
    - unit_tests
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"

.deploy_template: &deploy_template
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to $ENVIRONMENT"
    - echo "Image: $IMAGE_TAG"

deploy_dev:
  <<: *deploy_template
  variables:
    ENVIRONMENT: development
  script:
    - echo "Deploying to development environment"
    - echo "Image: $IMAGE_TAG"
  environment:
    name: development
    url: https://dev.rag-server.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"

deploy_prod:
  <<: *deploy_template
  variables:
    ENVIRONMENT: production
  script:
    - echo "Deploying to production environment"
    - echo "Image: $IMAGE_TAG"
  environment:
    name: production
    url: https://rag-server.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

endpoint_tests_dev:
  stage: endpoint-test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Testing development endpoints"
    - "curl -f https://dev.rag-server.example.com/api/goods/health || exit 1"
    - "curl -f https://dev.rag-server.example.com/api/goods/version || exit 1"
    - echo "Health and version endpoints are working"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  needs:
    - deploy_dev

endpoint_tests_prod:
  stage: endpoint-test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Testing production endpoints"
    - "curl -f https://rag-server.example.com/api/goods/health || exit 1"
    - "curl -f https://rag-server.example.com/api/goods/version || exit 1"
    - echo "Health and version endpoints are working"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
  needs:
    - deploy_prod